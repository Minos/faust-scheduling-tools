#!/usr/bin/env python3

from typing import List

import argparse
import os

from build import (FaustProgram, FaustBenchmarkingPlan, FaustTestingPlan,
                   Compiler, Architecture, BenchType)
from test import run_tests
from plot import plot_benchmark_loops, plot_benchmark_summary, PlotType
from perf import PerfEvent


class ArgError(BaseException):
    message: str

    def __init__(self, message: str):
        self.message = message

    def __str__(self):
        return self.message


def main():
    parser = argparse.ArgumentParser(prog='fcschedtool')

    subparsers = parser.add_subparsers(required=True)
    add_build_parser(subparsers)
    add_run_parser(subparsers)
    add_plot_parser(subparsers)
    add_summary_parser(subparsers)
    add_test_parser(subparsers)

    args = parser.parse_args()
    try:
        args.func(args)
    except ArgError as err:
        print(err)
        parser.print_help()


def add_build_parser(subparsers):
    parser = subparsers.add_parser(
        'build', help='pre-build perf measuring binaries for the given DSP programs'
    )
    add_path_argument(parser)
    add_build_arguments(parser)
    parser.set_defaults(func=build_command)


def add_run_parser(subparsers):
    parser = subparsers.add_parser(
        'run', help='pre-run perf measures for the given DSP programs'
    )
    add_path_argument(parser)
    add_build_arguments(parser)
    add_run_arguments(parser, True)
    parser.set_defaults(func=run_command)


def add_plot_parser(subparsers):
    parser = subparsers.add_parser(
        'plot',
        help='plot perf events over time for given DSP program'
    )
    add_path_argument(parser)
    add_build_arguments(parser)
    add_run_arguments(parser, False)
    parser.add_argument('-o', '--output', help='Output plot to file', default=None)
    parser.set_defaults(func=plot_command)


def add_summary_parser(subparsers):
    parser = subparsers.add_parser(
        'summary',
        help='plot global performances for every strategy, for every event'
    )
    add_path_argument(parser)
    add_build_arguments(parser)
    add_run_arguments(parser, True)
    parser.add_argument('-o', '--output', help='Output plot to file', default=None)
    parser.set_defaults(func=summary_command)


def add_test_parser(subparsers):
    parser = subparsers.add_parser(
        'test',
        help='check that all scheduling strategies produce the same impulse response',
    )
    add_path_argument(parser)
    parser.set_defaults(func=test_command)


def add_path_argument(parser):
    parser.add_argument(
        'path',
        help='FAUST program or directory containing FAUST programs',
        nargs='+'
    )


def add_build_arguments(parser):
    parser.add_argument('--clang',
                        help='Build with clang (default)',
                        action='store_true')
    parser.add_argument('--gcc',
                        help='Build with gcc',
                        action='store_true')
    parser.add_argument('--native',
                        help='Build with -march=native (default)',
                        action='store_true')
    parser.add_argument('--generic',
                        help='Build without -march=native',
                        action='store_true')
    parser.add_argument('--exhaustive',
                        help='Build with gcc and clang, with and without -march=native',
                        action='store_true')


def add_run_arguments(parser, extended_event_list):
    parser.add_argument(
        '-e', '--events', action='append', default=[],
        help='A comma-separated list of linux perf events to measure'
    )
    parser.add_argument(
        '-n', default=1000,
        help='Number of loops to run'
    )
    parser.add_argument(
        '-f', '--force', help='Override previous runs', action='store_true'
    )
    parser.add_argument(
        '-p', '--preset', default=None,
        help=f'Use a preset event list. Available presets: '
             f'{", ".join(PlotType.all(extended_event_list))}'
    )
    parser.add_argument(
        '--alsa', action='store_true',
        help='Run tests with the ALSA backend',
    )
    parser.add_argument(
        '--jack', action='store_true',
        help='Run tests with the JACK backend',
    )
    parser.add_argument(
        '--basic', action='store_true',
        help='Run tests with the simple backend (default)'
    )


def build_command(args):
    plan = create_benchmarking_plan(args, build_only=True)
    plan.build()


def run_command(args):
    plan = create_benchmarking_plan(args)
    plan.run()


def test_command(args):
    plan = create_testing_plan(args)
    tests = plan.build()
    run_tests(tests)


def plot_command(args):
    plan = create_benchmarking_plan(args)
    benchmarks = plan.build()
    for benchmark in benchmarks:
        plot_benchmark_loops(benchmark, 
                             plot_type=PlotType.parse(args.preset),
                             output_directory=args.output)


def summary_command(args):
    plan = create_benchmarking_plan(args)
    plan.events = PlotType.SUMMARY.events()
    plan.loops = 100
    benchmarks = plan.build()

    for benchmark in benchmarks:
        plot_benchmark_summary(benchmark,
                               output_directory=args.output)


def find_dsp(paths: List[str]) -> List[str]:
    def rec_find_dsp(path: str) -> List[str]:
        if path.endswith(".dsp"):
            return [path]
        if os.path.isdir(path):
            return sum([rec_find_dsp(os.path.join(path, f))
                        for f in os.listdir(path)],
                       [])
        return []

    programs = sorted(sum([rec_find_dsp(p) for p in paths], []), key=str.lower)
    if len(programs) == 0:
        raise ArgError(f'No FAUST dsp files found in {paths}')
    return programs


def build_list_from_args(provided):
    return sum([arg.split(',') for arg in provided], [])


def find_events(args) -> List[PerfEvent]:
    if args.preset is not None:
        try:
            return PlotType(args.preset).events()
        except ValueError:
            raise ArgError(f'Preset {args.preset} not found.')
    names = sum([arg.split(',') for arg in args.events], [])
    return [PerfEvent(name) for name in names]


def create_benchmarking_plan(args, *, build_only=False) -> FaustBenchmarkingPlan:
    programs = [FaustProgram(dsp) for dsp in find_dsp(args.path)]
    plan = FaustBenchmarkingPlan(programs)

    if args.exhaustive:
        plan.compilers = Compiler.all()
        plan.architectures = Architecture.all()

    if args.clang:
        plan.compilers = [Compiler.CLANG]
    elif args.gcc:
        plan.compilers = [Compiler.GCC]

    if args.native:
        plan.architectures = [Architecture.NATIVE]
    elif args.generic:
        plan.architectures = [Architecture.X86_64]

    if build_only:
        return plan

    if args.jack:
        plan.bench_type = BenchType.JACK
    elif args.alsa:
        plan.bench_type = BenchType.ALSA
    elif args.basic:
        plan.bench_type = BenchType.BASIC

    plan.events = find_events(args)
    plan.loops = args.n
    plan.override = args.force

    return plan


def create_testing_plan(args) -> FaustTestingPlan:
    programs = [FaustProgram(dsp) for dsp in find_dsp(args.path)]
    plan = FaustTestingPlan(programs)
    return plan


if __name__ == '__main__':
    main()
