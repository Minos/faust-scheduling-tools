#!/usr/bin/env python

import argparse
import multiprocessing
import os
import subprocess

import common as co


class Run:
    def __init__(self, directory, program_name, compiler, arch, strategy):
        self.directory = directory
        self.program_name = program_name
        self.compiler = compiler
        self.arch = arch
        self.strategy = strategy
        self.path = f"{directory}/{program_name}.bench/" \
                    f"{program_name}_ss{strategy}_{compiler}_{arch}"

    def exec(self, run_number, override):
        output = f"{self.path}.r{run_number}.csv"
        if not override and os.path.exists(output) \
                and os.path.getmtime(output) > os.path.getmtime(self.path):
            return

        print(f"  RUN    {self.program_name} "
              f"[strategy {self.strategy}, {self.compiler}, "
              f"{self.arch}, run {run_number}]")
        subprocess.run([self.path, '-o', output]).check_returncode()


def run_strategies(directory, program_name, compilers, archs, run_number, *,
                   override=False):
    runs = [
        Run(directory, program_name, cc, a, s)
        for cc in compilers
        for a in archs
        for s in co.STRATEGIES
    ]

    binaries = [r.path for r in runs]
    nproc = multiprocessing.cpu_count()
    subprocess.run(["make", "-s", f"-j{nproc}"] + binaries).check_returncode()

    for r in runs:
        r.exec(run_number, override)


def main():
    parser = argparse.ArgumentParser(
        prog="Plot detailed events",
        description="Plot raw perf events generated by run_strategies",
    )

    parser.add_argument("path", help="DSP program or directory")
    parser.add_argument("-r", "--run", help="Run number", default=0)
    parser.add_argument(
        "-c",
        "--compiler",
        help=f"Restrict to given compiler ({', '.join(co.COMPILERS)})",
        default=None,
    )
    parser.add_argument(
        "-a",
        "--arch",
        help=f"Restrict to given arch ({', '.join(co.ARCHS)})",
        default=None,
    )

    args = parser.parse_args()

    compilers = [args.compiler] if args.compiler is not None else co.COMPILERS
    archs = [args.arch] if args.arch is not None else co.ARCHS

    files = sorted(co.find_dsp(args.path), key=str.lower)

    if len(files) == 0:
        parser.print_help()
        exit(1)

    for file in files:
        directory, filename = os.path.split(file)
        program_name, ext = os.path.splitext(filename)
        run_strategies(directory, program_name, compilers, archs, args.run,
                       override=False)


if __name__ == "__main__":
    main()
