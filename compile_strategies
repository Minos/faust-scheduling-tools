#!/usr/bin/env bash

set -e

strategies=(0 1 2 3)
compilers=('clang++' 'g++')


show_usage() {
    name=$1
    echo "Usage: $name [-f] [-c] [-S] files (cpp or dsp or directory)"
    echo "-f: force recompilation of FAUST files"
    echo "-c: force recompilation of CPP files"
    echo "-S: output assembly code instead of binary"
    exit 1
}

compile_variant() {
    local compiler=$1
    local cpp=$2
    local output=$3
    local native=$4

    flags="$CFLAGS $native"

    if [ "$output_assembly" = true ]; then
        output="${output}.S"
        flags="${flags} -S"
    fi

    if [ ! -e "$output" ] || [ "$output" -ot "$cpp" ] || [ "$force_cpp" = true ]; then
        echo "Compiling $output"
        $compiler -lpfm --std=c++20 $flags "$cpp" -o "$output" &
    fi
}

compile_cpp() {
    local cpp=$1

    local dir base
    dir=$(dirname "$cpp")
    base=$(basename "$cpp" .cpp)

    for compiler in "${compilers[@]}"; do
        binary=${dir}/${base}_${compiler}

        compile_variant "$compiler" "$cpp" "${binary}_generic"
        compile_variant "$compiler" "$cpp" "${binary}_native" -march=native
    done
    wait
}

compile_faust() {
    local src=$1

    local srcdir dsp
    srcdir=$(dirname "$src")
    dsp=$(basename "$src" .dsp)

    local dir=${srcdir}/${dsp}.bench

    mkdir -p "${dir}"

    for strategy in "${strategies[@]}"; do
        local cpp=${dir}/${dsp}_ss${strategy}.cpp

        if [ ! -e "$cpp" ] || [ "$src" -nt "$cpp" ] || [ "$BENCHARCH" -nt "$cpp" ] \
            || [ "$force_faust" = true ]; \
        then
            echo "Generating $cpp"
            ${FAUST} -a "${BENCHARCH}" \
                -lang "${FAUSTLANG}" \
                -ss "$strategy" \
                "$src" > "$cpp"
        fi

        compile_cpp "$cpp"
    done
}

compile_file() {
    local src=$1
    local explicit=$2

    local ext=${src##*.}

    if [ "$ext" = dsp ]; then
        compile_faust "$src"
    elif [ "$ext" = cpp ]; then
        compile_cpp "$src"
    elif [ "$explicit" = true ]; then
        echo "cannot compile $src"
        exit 1
    fi
}

compile_directory() {
    local dir=$1

    for f in "$dir"/*; do
        compile_file "$f" false
    done
}

force_faust=false
force_cpp=false
output_assembly=false

FAUST=${FAUST:-./faust}
BENCHARCH=${BENCHARCH:-bencharch.cpp}
FAUSTLANG=${FAUSTLANG:-ocpp}
CFLAGS=${CFLAGS:--O3 -ffast-math}

sources=()

while [ "$1" ]; do
    p=$1

    if [ "${p:0:1}" = "-" ]; then
        while [ "$p" ]; do
            p=${p:1}
            l=${p:0:1}
            case "$l" in
                "f") force_faust=true ;;
                "c") force_cpp=true;;
                "S") output_assembly=true;;
            esac
        done
    else
        sources+=("$p")
    fi
    shift
done

if [ ${#sources[@]} = 0 ]; then
    show_usage "$0"
fi

for src in "${sources[@]}"; do
    if [ -d "$src" ]; then
        compile_directory "$src"
    elif [ -e "$src" ]; then
        compile_file "$src" true
    else
        echo "file not found: $src"
    fi
done
