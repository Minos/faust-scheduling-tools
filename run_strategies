#!/usr/bin/env bash

set -e

run=5

strategies=(0 1 2 3)
compilers=('clang++' 'g++')


show_usage() {
    local name=$1
    echo "Usage: $name [-f] [-c] files (cpp or dsp or directory)"
    exit 1
}

run_variant() {
    local compiler=$1
    local cpp=$2
    local binary=$3
    local output="${binary}.r${run}.csv"

    if [ ! -e "$output" ] || [ "$output" -ot "$binary" ] || [ "$force_run" = true ]; then
        echo "Running $binary"
            "$binary" -r >"$output"
    fi
}

run_cpp() {
    local cpp
    local dir
    local base

    cpp=$1
    dir=$(dirname "$cpp")
    base=$(basename "$cpp" .cpp)

    for compiler in "${compilers[@]}"; do
        binary=${dir}/${base}_${compiler}

        run_variant "$compiler" "$cpp" "${binary}_x86-64"
        run_variant "$compiler" "$cpp" "${binary}_native"
    done
}

run_faust() {
    local src=$1

    local srcdir
    srcdir=$(dirname "$src")
    local dsp
    dsp=$(basename "$src" .dsp)

    local dir=${srcdir}/${dsp}.bench

    for strategy in "${strategies[@]}"; do
        local cpp=${dir}/${dsp}_ss${strategy}.cpp
        run_cpp "$cpp"
    done
}

run_file() {
    local src=$1
    local explicit=$2
    local ext=${src##*.}
    if [ "$ext" = dsp ]; then
        run_faust "$src"
    elif [ "$ext" = cpp ]; then
        run_cpp "$src"
    elif [ "$explicit" = true ]; then
        echo "cannot run $src"
        exit 1
    fi
}

run_directory() {
    local dir=$1
    for f in "$dir"/*; do
        run_file "$f" false
    done
}


force_run=false

while [ "$1" ]; do
    p=$1
    if [ "${p:0:1}" = "-" ]; then
        while [ "$p" ]; do
            p=${p:1}
            l=${p:0:1}
            case "$l" in
                "f") force_run=true ;;
            esac
        done
    else
        sources+=("$p")
    fi
    shift
done

if [ ${#sources[@]} = 0 ]; then
    show_usage "$0"
fi

for src in "${sources[@]}"; do
    if [ -d "$src" ]; then
        run_directory "$src"
    elif [ -e "$src" ]; then
        run_file "$src" true
    else
        echo "file not found: $src"
    fi
done
